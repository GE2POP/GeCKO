
This script was made to help you launch our Snakemake workflows.

To do so, follow the steps:

1) Clone or copy our GitHub repository (and all its contents):
$ git clone git@github.com:GE2POP/GeCKO.git

2) Copy the appropriate config and cluster_config files and adapt them to your data and your cluster.
For more information on how to fill them out, see the more detailed help available on https://github.com/GE2POP/GeCKO
It is advised to place these files in a CONFIG folder in your working directory, under the names config_WorkflowName.yml and cluster_config_WorkflowName.json

3) Use the launcher script runGeCKO.sh to run the workflow.

*** BEFORE LAUNCHING ***
- Make the script executable with:
$ chmod 755 runGeCKO.sh

- If the script was open on a Windows system and you will execute it on a Linux system, you may need to remove windows carriage returns ('\r') with:
$ dos2unix runGeCKO.sh
or
$ sed -i 's/\r$//g' runGeCKO.sh ; sed -i 's/\r/\n/g' runGeCKO.sh

- Make sure Snakemake and Conda are available to your working environment.
Either install them on your computer, or if you are working on a cluster, you may need to 'module load' them, or to 'conda activate' Snakemake, depending on your cluster's software management policy.
If your cluster uses environment modules, you can add the 'module load' lines inside runGeCKO.sh: you will find a dedicated zone "WRITE YOUR MODULE LOADS HERE" at the top of the script. It is advised to precede it with 'module purge' to avoid potential conflicts with previously loaded modules. To find out how to name the needed modules, use the 'module avail' command. The modules will be loaded every time you execute the script.
If your cluster uses Conda environments, Conda will likely be readily available, and you will only need to conda activate Snakemake. To find out how to name the needed modules, use the 'conda info --envs' command. You may need to call conda activate outside of the script itself.


*** OPTIONS ***

POSSIBLE ACTIONS:
The launcher's default behavior is to run the workflow, but other actions can be called instead:

--help: to print the help
$ ./runGeCKO.sh --workflow-path PATH/TO/GeCKO --help

--dryrun: to only dryrun the workflow (and detect potential errors) without actually running it
$ ./runGeCKO.sh --workflow-path PATH/TO/GeCKO --workflow WorkflowName --dryrun

--report: to write an html report of the workflow's last run
$ ./runGeCKO.sh --workflow-path PATH/TO/GeCKO --workflow WorkflowName --report

--diagram: to write an svg diagram of the workflow
$ ./runGeCKO.sh --workflow-path PATH/TO/GeCKO --workflow WorkflowName --diagram


MANDATORY PARAMETERS FOR ALL ACTIONS (except --workflow for --help):
--workflow-path [...]: the path to the directory you cloned from GitHub (PATH/TO/GeCKO)
--workflow [...]: the name of the workflow you want to run. Current existing options are 'DataCleaning', 'ReadMapping', 'VariantCalling' and 'VcfFiltering'

CONFIGURATION PARAMETERS:
--job-scheduler [...]: name of the job scheduler that is installed on your cluster. Current supported options are 'SLURM' and 'SGE'. If omitted, the workflow will run without submitting any job and any parallelization.
--cluster-config [...]: path to the cluster config file. If omitted, this script will look for a cluster_config_WorkflowName.yml file (eg: cluster_config_DataCleaning.yml) in a CONFIG/ folder in the directory it was executed from. This argument can also be absent if the job-scheduler is not specified (no jobs submitted).
--config-file [...]: path to the workflow's config file. If omitted, this script will look for a config_WorkflowName.yml file (eg: config_DataCleaning.yml) in a CONFIG/ folder in the directory it was executed from.

USEFUL EXTRA OPTIONS:
--jobs [int]: the maximum number of jobs that can be run in parallel (default: 1)
--printshellcmds: to print the shell commands run by Snakemake for each step
--latency-wait [int]: the number of seconds Snakemake will wait after the end of a task to look for the expected output files (default: 20).
You should increase it if Snakemake returns an error such as:
    "MissingOutputException in ... of ...:
    Job Missing files after 20 seconds:
    ...
    This might be due to filesystem latency. If that is the case, consider to increase the wait time with --latency-wait."
--forceall: run all the workflow's steps, even if output files already exist (and overwrite them). Without this argument, Snakemake's default behavior is to only run the steps for which output files are missing.
--conda-env-path: the path to a folder of your choice where conda will build the workflow's environment. If specified, the environment will only be built once in this folder (the first time you run the workflow). Otherwise, a new environment will be built in every new folder the workflow is launched from.

ANY OTHER OPTIONS:
--extra-snakemake-options ["..."]: any list of other Snakemake options that you may want to pass to the Snakemake command. Be careful to provide them between quotes. For an exhaustive list of Snakemake options see https://snakemake.readthedocs.io/en/stable/index.html.


For more information or to report any issue, see our GitHub: https://github.com/GE2POP/GeCKO
